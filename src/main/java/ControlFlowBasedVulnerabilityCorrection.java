import model.VulnerableMethodUses;
import org.apache.commons.collections4.BidiMap;
import org.apache.commons.collections4.bidimap.DualHashBidiMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import spoon.reflect.code.*;
import spoon.reflect.declaration.*;
import spoon.reflect.factory.Factory;
import spoon.reflect.visitor.filter.TypeFilter;
import spoon.support.reflect.code.CtAssignmentImpl;
import spoon.support.reflect.code.CtBlockImpl;
import spoon.support.reflect.code.CtIfImpl;
import spoon.support.reflect.code.CtStatementListImpl;
import java.util.*;

// TODO beautify. Add comments and refactoring for optimization.
public class ControlFlowBasedVulnerabilityCorrection {
    private static final Logger logger = LoggerFactory.getLogger(ControlFlowBasedVulnerabilityCorrection.class);
    private static final String NAME_FOR_VARIABLE = "$";
    private static final TreeMap<String, String> VARIABLES_TO_ADD = new TreeMap<>();
    private static final BidiMap<String, String> VARIABLES_REPLACEMENT = new DualHashBidiMap<>();
    private static int counter = 0;

    public static void correctVulnerability(Factory factory, CtMethod<?> modifiedMethod, VulnerableMethodUses vulnerableMethodUsesCases){
        String[] secretArguments = findSecretArguments(modifiedMethod, vulnerableMethodUsesCases);
        for (String secretArgument : secretArguments) {
            logger.info("{} is a secret argument.", secretArgument);
        }

        CtBlock<?> methodBody = modifiedMethod.getBody();
        traverseMethodBody(factory, methodBody, secretArguments);

        List<CtLocalVariable<?>> variableList = methodBody.getElements(new TypeFilter<>(CtLocalVariable.class));
        counter = 0;
        // TODO is it worth to order the list just so that variables appear ordered?
        VARIABLES_TO_ADD.descendingMap().forEach((name, type) -> {
            String key = VARIABLES_REPLACEMENT.getKey(name);
            Optional<CtLocalVariable<?>> replacedVariable = variableList.stream()
                    .filter(variable -> variable.getSimpleName().equals(key))
                    .findFirst();
            CtCodeSnippetStatement newVariable;
            if (replacedVariable.isPresent()) {
                CtLocalVariable<?> localVariable = replacedVariable.get();
                CtExpression<?> assignment = localVariable.getDefaultExpression();
                if (assignment == null) {
                    newVariable = factory.createCodeSnippetStatement(type + " " + name);
                } else {
                    newVariable = factory.createCodeSnippetStatement(type + " " + name + " = " + assignment);
                }
            } else {
                newVariable = factory.createCodeSnippetStatement(type + " " + name);
            }
            methodBody.addStatement(0, newVariable);
        });
        // TODO remove clear
        VARIABLES_TO_ADD.clear();
        VARIABLES_REPLACEMENT.clear();
    }

    private static String[] findSecretArguments(CtMethod<?> modifiedMethod, VulnerableMethodUses vulnerableMethodUsesCases) {
        ArrayList<Integer> secretArgumentsIndex = new ArrayList<>();
        String[] firstUseCaseArgumentsNames = vulnerableMethodUsesCases.getFirstUseCaseArgumentsNames();
        String[] secondUseCaseArgumentsNames = vulnerableMethodUsesCases.getSecondUseCaseArgumentsNames();

        for (int idx = 0; idx < firstUseCaseArgumentsNames.length; idx++) {
            if (!firstUseCaseArgumentsNames[idx].equals(secondUseCaseArgumentsNames[idx])) {
                logger.info("The argument in position {} is a secret.", idx);
                secretArgumentsIndex.add(idx);
            }
        }

        List<CtParameter<?>> parameters = modifiedMethod.getParameters();

        String[] secretArguments = new String[secretArgumentsIndex.size()];

        for (int idx = 0; idx < secretArgumentsIndex.size(); idx++) {
            secretArguments[idx] = parameters.get(secretArgumentsIndex.get(idx)).getSimpleName();
        }
        return secretArguments;
    }

    private static void traverseMethodBody(Factory factory, CtBlock<?> methodBody, String[] secretArguments) {
        for (CtStatement statement : methodBody) {
            if (statement instanceof CtIfImpl && usesSecret((CtIfImpl) statement, secretArguments)) {
                logger.info("Found the source of vulnerability.");
                handleVulnerability(factory, (CtIfImpl) statement);
            }
            if (statement instanceof CtLoop) {
                CtLoop ctLoop = (CtLoop) statement;
                traverseMethodBody(factory, ((CtBlock<?>)ctLoop.getBody()), secretArguments);
            }
        }
    }

    private static boolean usesSecret(CtIfImpl statement, String[] secretArguments) {
        for (String secretArgument : secretArguments) {
            if (Arrays.stream(statement.getCondition().toString().split("\\."))
                    .anyMatch(word -> word.matches(".*\\b" + secretArgument + "\\b.*"))) {
                return true;
            }
        }
        return false;
    }

    private static void handleVulnerability(Factory factory, CtIfImpl statement) {
        CtBlock<?> thenStatement = statement.getThenStatement();
        CtBlock<?> elseStatement = statement.getElseStatement();

        List<CtStatement> thenStatements = thenStatement.clone().getStatements();
        CtStatementList thenStatementsList = modifyStatements(factory, thenStatements);

        if (elseStatement == null) {
            CtBlock<Object> block = factory.createBlock();
            elseStatement = block.insertEnd(thenStatementsList);
        } else {
            List<CtStatement> elseStatements = elseStatement.clone().getStatements();   // TODO why clone?
            CtStatementList elseStatementsList = modifyStatements(factory, elseStatements);
            thenStatement.insertEnd(elseStatementsList);
            elseStatement.insertEnd(thenStatementsList);
            statement.setThenStatement(thenStatement);
        }
        statement.setElseStatement(elseStatement);
    }

    private static CtStatementList modifyStatements(Factory factory, List<CtStatement> statements) {
        CtStatementList statementList = new CtStatementListImpl<>();
        for (CtElement element : statements) {
            CtStatement statement = null;
            if (element instanceof CtAssignmentImpl) {
                statement = modifyAssignment(factory, (CtAssignmentImpl<?, ?>) element);
            } else if (element instanceof CtLocalVariable) {
                statement = (CtStatement) modifyLocalVariable((CtLocalVariable<?>) element);
            } else if (element instanceof CtWhile) {
                statement = modifyWhile(factory, (CtWhile) element);
            } else if (element instanceof CtUnaryOperator) {
                CtUnaryOperator<?> unaryOperator = (CtUnaryOperator<?>) element;
                String operand = unaryOperator.getOperand().toString();
                if (VARIABLES_REPLACEMENT.containsKey(operand)) {
                    CtExpression variableExpression = factory.createCodeSnippetExpression(VARIABLES_REPLACEMENT.get(operand));
                    statement =  unaryOperator.setOperand(variableExpression);
                } else {
                    statement = null;
                }
            }
            statementList.addStatement(statement);
        }
        return statementList;
    }

    private static CtStatement modifyAssignment(Factory factory, CtAssignmentImpl<?, ?> assignmentImpl) {
        logger.info("Found an assignment.");
        CtExpression<?> assigned = assignmentImpl.getAssigned();
        CtExpression<?> assignment = assignmentImpl.getAssignment();
        String newAssigned;
        String newAssignment = assignment.toString();
        if (VARIABLES_REPLACEMENT.containsKey(assigned.toString())) {
            newAssigned = VARIABLES_REPLACEMENT.get(assigned.toString());
        } else {
            String type = assignmentImpl.getType().getSimpleName();
            counter++;
            newAssigned = NAME_FOR_VARIABLE + counter;
            VARIABLES_REPLACEMENT.put(assigned.toString(), newAssigned);
            VARIABLES_TO_ADD.put(newAssigned, type);
        }
        if (assignment instanceof CtArrayRead) {
            CtArrayRead<?> newArrayRead = modifyArrayOperation(factory, (CtArrayRead<?>) assignment);
            newAssignment = newArrayRead.toString();
        } else if (assignment instanceof CtBinaryOperator){
            newAssignment = modifyBinaryOperator(factory, (CtBinaryOperator<?>) assignment);
        }

        return factory.createCodeSnippetStatement(newAssigned + " = " + newAssignment);
    }

    private static CtArrayRead<?> modifyArrayOperation(Factory factory, CtArrayRead<?> arrayRead) {
        CtExpression<?> target = arrayRead.getTarget();
        CtExpression<Integer> indexExpression = arrayRead.getIndexExpression();
        CtArrayRead<?> newArrayRead = factory.createArrayRead();
        if (VARIABLES_REPLACEMENT.containsKey(target.toString())) {
            CtCodeSnippetExpression<?> newTarget = factory.createCodeSnippetExpression(VARIABLES_REPLACEMENT.get(target.toString()));
            newArrayRead.setTarget(newTarget);
        } else {
            newArrayRead.setTarget(target);
        }
        if (VARIABLES_REPLACEMENT.containsKey(indexExpression.toString())) {
            CtCodeSnippetExpression<Integer> newIndex = factory.createCodeSnippetExpression(VARIABLES_REPLACEMENT.get(indexExpression.toString()));
            newArrayRead.setIndexExpression(newIndex);
        }
        return newArrayRead;
    }

    private static String modifyBinaryOperator(Factory factory, CtBinaryOperator<?> binaryOperator) {
        CtExpression<?> leftHandOperand = binaryOperator.getLeftHandOperand();
        CtExpression<?> rightHandOperand = binaryOperator.getRightHandOperand();
        if (leftHandOperand instanceof CtVariableRead) {
            CtExpression<?> leftHandOperator = modifyVariableRead(factory, leftHandOperand);
            binaryOperator.setLeftHandOperand(leftHandOperator);
        } else if (leftHandOperand instanceof CtArrayRead) {
            CtArrayRead<?> leftOperand = modifyArrayOperation(factory, (CtArrayRead<?>) leftHandOperand);
            binaryOperator.setLeftHandOperand(leftOperand);
        }
        if (rightHandOperand instanceof CtVariableRead) {
            CtExpression<?> rightHandOperator = modifyVariableRead(factory, rightHandOperand);
            binaryOperator.setRightHandOperand(rightHandOperator);
        }
        return binaryOperator.toString();
    }

    private static CtExpression<?> modifyVariableRead(Factory factory, CtExpression<?> handOperand) {
        String leftHandOperator = handOperand.toString();
        CtExpression<?> newHandOperator;
        if (VARIABLES_REPLACEMENT.containsKey(leftHandOperator)) {
            String newLeftHandOperatorVariable = VARIABLES_REPLACEMENT.get(leftHandOperator);
            newHandOperator = factory.createCodeSnippetExpression(newLeftHandOperatorVariable);
        } else {
            String type = handOperand.getType().toString();
            counter++;
            newHandOperator = factory.createCodeSnippetExpression(NAME_FOR_VARIABLE + counter);
            VARIABLES_REPLACEMENT.put(leftHandOperator, newHandOperator.toString());
            VARIABLES_TO_ADD.put(newHandOperator.toString(), type);
        }
        return  newHandOperator;
    }

    private static CtNamedElement modifyLocalVariable(CtLocalVariable<?> localVariable) {
        counter++;
        String newVariable = NAME_FOR_VARIABLE + counter;
        VARIABLES_REPLACEMENT.put(localVariable.getSimpleName(), newVariable);
        return localVariable.setSimpleName(newVariable);
    }

    private static CtWhile modifyWhile(Factory factory, CtWhile whileStatement) {
        CtBinaryOperator<Boolean> loopingExpression = (CtBinaryOperator<Boolean>) whileStatement.getLoopingExpression();
        String leftHandOperand = loopingExpression.getLeftHandOperand().toString();
        String rightHandOperand = loopingExpression.getRightHandOperand().toString();

        if (VARIABLES_REPLACEMENT.containsKey(leftHandOperand)) {
            String replacement = VARIABLES_REPLACEMENT.get(leftHandOperand);
            CtCodeSnippetExpression<Object> expressionReplacement = factory.createCodeSnippetExpression(replacement);
            loopingExpression.setLeftHandOperand(expressionReplacement);
        }

        if (VARIABLES_REPLACEMENT.containsKey(rightHandOperand)) {
            String replacement = VARIABLES_REPLACEMENT.get(rightHandOperand);
            CtCodeSnippetExpression<Object> expressionReplacement = factory.createCodeSnippetExpression(replacement);
            loopingExpression.setRightHandOperand(expressionReplacement);
        }

        List<CtStatement> bodyStatements = ((CtBlock<?>) whileStatement.getBody()).getStatements();
        CtStatementList bodyNewStatements = modifyStatements(factory, bodyStatements);
        CtBlockImpl<?> ctBlock = new CtBlockImpl<>();
        bodyNewStatements.forEach(ctStatement -> ctBlock.addStatement(ctStatement.clone()));    // Needs clone to avoid error by modify node parent.
        whileStatement.setBody(ctBlock);
        return whileStatement;
    }
}