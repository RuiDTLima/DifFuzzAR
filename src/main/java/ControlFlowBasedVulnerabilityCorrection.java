import model.VulnerableMethodUses;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import spoon.reflect.code.CtBlock;
import spoon.reflect.code.CtLoop;
import spoon.reflect.code.CtStatement;
import spoon.reflect.declaration.CtElement;
import spoon.reflect.declaration.CtMethod;
import spoon.reflect.declaration.CtParameter;
import spoon.reflect.factory.CodeFactory;
import spoon.reflect.factory.Factory;
import spoon.support.reflect.code.CtAssignmentImpl;
import spoon.support.reflect.code.CtIfImpl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class ControlFlowBasedVulnerabilityCorrection {
    private static final Logger logger = LoggerFactory.getLogger(ControlFlowBasedVulnerabilityCorrection.class);

    public static void correctVulnerability(Factory factory, CtMethod<?> modifiedMethod, VulnerableMethodUses vulnerableMethodUsesCases){
        String[] secretArguments = findSecretArguments(modifiedMethod, vulnerableMethodUsesCases);
        for (String secretArgument : secretArguments) {
            logger.info("{} is a secret argument.", secretArgument);
        }

        traverseMethodBody(factory, modifiedMethod.getBody(), secretArguments);
    }

    private static String[] findSecretArguments(CtMethod<?> modifiedMethod, VulnerableMethodUses vulnerableMethodUsesCases) {
        ArrayList<Integer> secretArgumentsIndex = new ArrayList<>();
        String[] firstUseCaseArgumentsNames = vulnerableMethodUsesCases.getFirstUseCaseArgumentsNames();
        String[] secondUseCaseArgumentsNames = vulnerableMethodUsesCases.getSecondUseCaseArgumentsNames();

        for (int idx = 0; idx < firstUseCaseArgumentsNames.length; idx++) {
            if (!firstUseCaseArgumentsNames[idx].equals(secondUseCaseArgumentsNames[idx])) {
                logger.info("The argument in position {} is a secret.", idx);
                secretArgumentsIndex.add(idx);
            }
        }

        List<CtParameter<?>> parameters = modifiedMethod.getParameters();

        String[] secretArguments = new String[secretArgumentsIndex.size()];

        for (int idx = 0; idx < secretArgumentsIndex.size(); idx++) {
            secretArguments[idx] = parameters.get(secretArgumentsIndex.get(idx)).getSimpleName();
        }
        return secretArguments;
    }

    private static void traverseMethodBody(Factory factory, CtBlock<?> body, String[] secretArguments) {
        for (CtStatement statement : body) {
            if (statement instanceof CtIfImpl && usesSecret((CtIfImpl) statement, secretArguments)) {
                logger.info("Found the source of vulnerability.");
                handleVulnerability(factory, (CtIfImpl) statement);
            }
            if (statement instanceof CtLoop) {
                CtLoop ctLoop = (CtLoop) statement;
                traverseMethodBody(factory, ((CtBlock<?>)ctLoop.getBody()), secretArguments);
            }
        }
    }

    private static boolean usesSecret(CtIfImpl statement, String[] secretArguments) {
        for (String secretArgument : secretArguments) {
            if (Arrays.stream(statement.getCondition().toString().split("\\."))
                    .anyMatch(word -> word.matches(".*\\b" + secretArgument + "\\b.*"))) {
                return true;
            }
        }
        return false;
    }

    private static void handleVulnerability(Factory factory, CtIfImpl statement) {
        CtStatement thenStatement = statement.getThenStatement().clone();
        CtBlock<?> elseStatement = (CtBlock<?>) thenStatement;
        for (CtElement element : thenStatement.asIterable()) {
            if (element instanceof CtAssignmentImpl) {
                logger.info("Found an assignment");
                CtBlock<Object> block = factory.createBlock();
                CtStatement blockStatement = (CtStatement) ((CtAssignmentImpl<?, ?>) element).getAssignment().clone();      // Needs the clone to avoid an error claiming to be replacing the node of the model.
                elseStatement = block.addStatement(blockStatement);
            }
        }

        statement.setElseStatement(elseStatement);
    }
}
