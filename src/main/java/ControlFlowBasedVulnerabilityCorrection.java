import model.VulnerableMethodUses;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import spoon.reflect.code.*;
import spoon.reflect.declaration.CtElement;
import spoon.reflect.declaration.CtMethod;
import spoon.reflect.declaration.CtNamedElement;
import spoon.reflect.declaration.CtParameter;
import spoon.reflect.factory.Factory;
import spoon.reflect.reference.CtTypeReference;
import spoon.reflect.visitor.filter.TypeFilter;
import spoon.support.reflect.code.CtAssignmentImpl;
import spoon.support.reflect.code.CtBlockImpl;
import spoon.support.reflect.code.CtIfImpl;
import spoon.support.reflect.code.CtStatementListImpl;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

public class ControlFlowBasedVulnerabilityCorrection {
    private static final Logger logger = LoggerFactory.getLogger(ControlFlowBasedVulnerabilityCorrection.class);
    private static final String VARIABLE_TO_ADD_NAME = "$";
    private static int counter = 1;
    private static boolean incremented = false;

    public static void correctVulnerability(Factory factory, CtMethod<?> modifiedMethod, VulnerableMethodUses vulnerableMethodUsesCases){
        String[] secretArguments = findSecretArguments(modifiedMethod, vulnerableMethodUsesCases);
        for (String secretArgument : secretArguments) {
            logger.info("{} is a secret argument.", secretArgument);
        }

        CtBlock<?> methodBody = modifiedMethod.getBody();
        traverseMethodBody(factory, methodBody, secretArguments);

        /*if (!incremented) {
            CtCodeSnippetStatement $1  = factory.createCodeSnippetStatement(variableType + " " + VARIABLE_TO_ADD_NAME + counter);
            methodBody.addStatement(0, $1);
        }*/
        // TODO alter this to avoid resetting the fields for the test.
        //variableType = null;
        counter = 1;
        incremented = false;
    }

    private static String[] findSecretArguments(CtMethod<?> modifiedMethod, VulnerableMethodUses vulnerableMethodUsesCases) {
        ArrayList<Integer> secretArgumentsIndex = new ArrayList<>();
        String[] firstUseCaseArgumentsNames = vulnerableMethodUsesCases.getFirstUseCaseArgumentsNames();
        String[] secondUseCaseArgumentsNames = vulnerableMethodUsesCases.getSecondUseCaseArgumentsNames();

        for (int idx = 0; idx < firstUseCaseArgumentsNames.length; idx++) {
            if (!firstUseCaseArgumentsNames[idx].equals(secondUseCaseArgumentsNames[idx])) {
                logger.info("The argument in position {} is a secret.", idx);
                secretArgumentsIndex.add(idx);
            }
        }

        List<CtParameter<?>> parameters = modifiedMethod.getParameters();

        String[] secretArguments = new String[secretArgumentsIndex.size()];

        for (int idx = 0; idx < secretArgumentsIndex.size(); idx++) {
            secretArguments[idx] = parameters.get(secretArgumentsIndex.get(idx)).getSimpleName();
        }
        return secretArguments;
    }

    private static void traverseMethodBody(Factory factory, CtBlock<?> methodBody, String[] secretArguments) {
        List<CtLocalVariable<?>> variableList = methodBody.getElements(new TypeFilter<>(CtLocalVariable.class));
        for (CtStatement statement : methodBody) {
            if (statement instanceof CtIfImpl && usesSecret((CtIfImpl) statement, secretArguments)) {
                logger.info("Found the source of vulnerability.");
                handleVulnerability(factory, variableList, (CtIfImpl) statement);
            }
            if (statement instanceof CtLoop) {
                CtLoop ctLoop = (CtLoop) statement;
                traverseMethodBody(factory, ((CtBlock<?>)ctLoop.getBody()), secretArguments);
            }
        }
    }

    private static boolean usesSecret(CtIfImpl statement, String[] secretArguments) {
        for (String secretArgument : secretArguments) {
            if (Arrays.stream(statement.getCondition().toString().split("\\."))
                    .anyMatch(word -> word.matches(".*\\b" + secretArgument + "\\b.*"))) {
                return true;
            }
        }
        return false;
    }

    private static void handleVulnerability(Factory factory, List<CtLocalVariable<?>> variableList, CtIfImpl statement) {
        HashMap<String, String> variablesReplacement = new HashMap<>();
        CtBlock<?> thenStatement = (CtBlock<?>) statement.getThenStatement().clone();
        CtBlock<?> elseStatement = statement.getElseStatement();
        if (elseStatement == null) {
            CtBlock<Object> block = factory.createBlock();
            // TODO add variables replacement.
            elseStatement = block.insertBegin(modifyStatements(factory, variablesReplacement, thenStatement.getStatements()));
        } else {
            List<CtStatement> thenStatements = thenStatement.getStatements();
            List<CtStatement> elseStatements = elseStatement.getStatements();
            CtStatementList thenStatementsList = modifyStatements(factory, variablesReplacement, thenStatements);
            CtStatementList elseStatementsList = modifyStatements(factory, variablesReplacement, elseStatements);
            thenStatement.insertEnd(elseStatementsList);
            elseStatement.insertEnd(thenStatementsList);
            statement.setThenStatement(thenStatement);
        }
        statement.setElseStatement(elseStatement);
    }

    private static CtStatementList modifyStatements(Factory factory, HashMap<String, String> variablesReplacement, List<CtStatement> statements) {
        CtStatementList statementList = new CtStatementListImpl<>();
        for (CtElement element : statements) {
            CtExpression<?> variableExpression = factory.createCodeSnippetExpression(VARIABLE_TO_ADD_NAME + counter);
            if (element instanceof CtAssignmentImpl) {
                CtAssignmentImpl<?, ?> assignmentImpl = (CtAssignmentImpl<?, ?>) element;
                logger.info("Found an assignment");
                CtExpression<?> assigned = assignmentImpl.getAssigned();
                CtExpression<?> assignment = assignmentImpl.getAssignment();
                String newAssigned = assigned.toString();
                String newAssignment = assignment.toString();
                if (variablesReplacement.containsKey(assigned.toString())) {
                    newAssigned = variablesReplacement.get(assigned.toString());
                }
                if (assignment instanceof CtArrayRead) {
                    CtArrayRead<?> arrayRead = (CtArrayRead<?>) assignment;
                    CtExpression<?> target = arrayRead.getTarget();
                    CtExpression<Integer> indexExpression = arrayRead.getIndexExpression();
                    CtArrayRead<?> newArrayRead = factory.createArrayRead();
                    if (variablesReplacement.containsKey(target.toString())) {
                        CtCodeSnippetExpression<?> newTarget = factory.createCodeSnippetExpression(variablesReplacement.get(target.toString()));
                        newArrayRead.setTarget(newTarget);
                    } else {
                        newArrayRead.setTarget(target);
                    }
                    if (variablesReplacement.containsKey(indexExpression.toString())) {
                        CtCodeSnippetExpression<Integer> newIndex = factory.createCodeSnippetExpression(variablesReplacement.get(indexExpression.toString()));
                        newArrayRead.setIndexExpression(newIndex);
                    }
                    newAssignment = newArrayRead.toString();
                }

                CtStatement blockStatement = factory.createCodeSnippetStatement(newAssigned + " = " + newAssignment);
                statementList.addStatement(blockStatement);
            } else if (element instanceof CtLocalVariable) {
                counter++;
                incremented = true;
                String newVariable = VARIABLE_TO_ADD_NAME + counter;
                CtLocalVariable<?> existingVariable = (CtLocalVariable<?>) element.clone();
                variablesReplacement.put(existingVariable.getSimpleName(), newVariable);
                CtNamedElement ctNamedElement = existingVariable.setSimpleName(newVariable);
                statementList.addStatement((CtStatement) ctNamedElement);
            } else if (element instanceof CtWhile) {
                CtWhile whileStatement = ((CtWhile) element.clone());
                CtBinaryOperator<Boolean> loopingExpression = (CtBinaryOperator<Boolean>) whileStatement.getLoopingExpression();
                String leftHandOperand = loopingExpression.getLeftHandOperand().toString();
                String rightHandOperand = loopingExpression.getRightHandOperand().toString();

                if (variablesReplacement.containsKey(leftHandOperand)) {
                    String replacement = variablesReplacement.get(leftHandOperand);
                    CtCodeSnippetExpression<Object> expressionReplacement = factory.createCodeSnippetExpression(replacement);
                    loopingExpression.setLeftHandOperand(expressionReplacement);
                }

                if (variablesReplacement.containsKey(rightHandOperand)) {
                    String replacement = variablesReplacement.get(rightHandOperand);
                    CtCodeSnippetExpression<Object> expressionReplacement = factory.createCodeSnippetExpression(replacement);
                    loopingExpression.setRightHandOperand(expressionReplacement);
                }

                List<CtStatement> bodyStatements = ((CtBlock<?>) whileStatement.getBody()).getStatements();
                CtStatementList bodyNewStatements = modifyStatements(factory, variablesReplacement, bodyStatements);
                CtBlockImpl<?> ctBlock = new CtBlockImpl<>();
                bodyNewStatements.forEach(ctStatement -> ctBlock.addStatement(ctStatement.clone()));    // Needs clone to avoid error by modify node parent.
                whileStatement.setBody(ctBlock);
                statementList.addStatement(whileStatement);
            } else if (element instanceof CtUnaryOperator) {
                CtUnaryOperator<?> ctUnaryOperator = ((CtUnaryOperator) element).setOperand(variableExpression);
                statementList.addStatement(ctUnaryOperator);
            }
        }
        return statementList;
    }
}